{"version":3,"sources":["../../src/app.js"],"names":["express","require","path","favicon","logger","cookieParser","bodyParser","mongoose","index","users","books","authors","app","promise","connect","set","join","__dirname","use","json","urlencoded","extended","static","req","res","next","err","Error","status","locals","message","error","get","render","module","exports"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAME,UAAUF,QAAQ,eAAR,CAAhB;AACA,IAAMG,SAASH,QAAQ,QAAR,CAAf;AACA,IAAMI,eAAeJ,QAAQ,eAAR,CAArB;AACA,IAAMK,aAAaL,QAAQ,aAAR,CAAnB;AACA,IAAMM,WAAWN,QAAQ,UAAR,CAAjB;AACA,IAAMO,QAAQP,QAAQ,gBAAR,CAAd;AACA,IAAMQ,QAAQR,QAAQ,gBAAR,CAAd;AACA,IAAMS,QAAQT,QAAQ,qBAAR,CAAd;AACA,IAAMU,UAAUV,QAAQ,uBAAR,CAAhB;;AAGA,IAAMW,MAAMZ,SAAZ;;AAEA,IAAMa,UAAQN,SAASO,OAAT,CAAiB,6BAAjB,CAAd;;AAIA;AACAF,IAAIG,GAAJ,CAAQ,OAAR,EAAiBb,KAAKc,IAAL,CAAUC,SAAV,EAAqB,OAArB,CAAjB;AACAL,IAAIG,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;;AAEA;AACAH,IAAIM,GAAJ,CAAQf,QAAQD,KAAKc,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+B,aAA/B,CAAR,CAAR;AACAL,IAAIM,GAAJ,CAAQd,OAAO,KAAP,CAAR;AACAQ,IAAIM,GAAJ,CAAQZ,WAAWa,IAAX,EAAR;AACAP,IAAIM,GAAJ,CAAQZ,WAAWc,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAT,IAAIM,GAAJ,CAAQb,cAAR;AACAO,IAAIM,GAAJ,CAAQlB,QAAQsB,MAAR,CAAepB,KAAKc,IAAL,CAAUC,SAAV,EAAqB,QAArB,CAAf,CAAR;;AAEAL,IAAIM,GAAJ,CAAQ,GAAR,EAAaV,KAAb;AACAI,IAAIM,GAAJ,CAAQ,QAAR,EAAkBT,KAAlB;AACAG,IAAIM,GAAJ,CAAQ,QAAR,EAAkBR,KAAlB;AACAE,IAAIM,GAAJ,CAAQ,UAAR,EAAmBP,OAAnB;;AAIA;AACAC,IAAIM,GAAJ,CAAQ,UAASK,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC7B,MAAIC,MAAM,IAAIC,KAAJ,CAAU,WAAV,CAAV;AACAD,MAAIE,MAAJ,GAAa,GAAb;AACAH,OAAKC,GAAL;AACH,CAJD;;AAMA;AACAd,IAAIM,GAAJ,CAAQ,UAASQ,GAAT,EAAcH,GAAd,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;AACpC;AACED,MAAIK,MAAJ,CAAWC,OAAX,GAAqBJ,IAAII,OAAzB;AACAN,MAAIK,MAAJ,CAAWE,KAAX,GAAmBR,IAAIX,GAAJ,CAAQoB,GAAR,CAAY,KAAZ,MAAuB,aAAvB,GAAuCN,GAAvC,GAA6C,EAAhE;;AAEF;AACEF,MAAII,MAAJ,CAAWF,IAAIE,MAAJ,IAAc,GAAzB;AACAJ,MAAIS,MAAJ,CAAW,OAAX;AACH,CARD;;AAUAC,OAAOC,OAAP,GAAiBvB,GAAjB","file":"app.js","sourcesContent":["const express = require('express');\nconst path = require('path');\nconst favicon = require('serve-favicon');\nconst logger = require('morgan');\nconst cookieParser = require('cookie-parser');\nconst bodyParser = require('body-parser');\nconst mongoose = require('mongoose');\nconst index = require('./routes/index');\nconst users = require('./routes/users');\nconst books = require('./routes/book/index');\nconst authors = require('./routes/author/index');\n\n\nconst app = express();\n\nconst promise=mongoose.connect('mongodb://localhost/library');\n\n\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'jade');\n\n// uncomment after placing your favicon in /public\napp.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use('/', index);\napp.use('/users', users);\napp.use('/books', books);\napp.use('/authors',authors);\n\n\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n    let err = new Error('Not Found');\n    err.status = 404;\n    next(err);\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n    res.locals.message = err.message;\n    res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n    res.status(err.status || 500);\n    res.render('error');\n});\n\nmodule.exports = app;\n"]}