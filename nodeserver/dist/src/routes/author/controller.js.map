{"version":3,"sources":["../../../../src/routes/author/controller.js"],"names":["index","req","res","next","find","then","model","map","schema","view","result","status","json","catch","index2"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AAEO,IAAMA,wBAAQ,SAARA,KAAQ,CAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC1C,WAAO,gBACFC,IADE,CACG,EADH,EAEFC,IAFE,CAGC,UAACC,KAAD,EAAW;AACPA,cAAMC,GAAN,CAAU,UAACC,MAAD;AAAA,mBAAYA,OAAOC,IAAP,EAAZ;AAAA,SAAV;AACH,KALF,EAOFJ,IAPE,CAQC,UAACK,MAAD,EAAQC,MAAR,EAAiB;AACbT,YAAIU,IAAJ,CAASF,MAAT;AACH,KAVF,EAWDG,KAXC,CAWKV,IAXL,CAAP;AAaH,CAdM;;AAiBA,IAAMW,0BAAS,SAATA,MAAS,CAACb,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACtC,WAAO,gBACFC,IADE,CACG,EADH,EAEFC,IAFE,CAGC,UAACC,KAAD,EAAW;AACPA,cAAMC,GAAN,CAAU,UAACC,MAAD;AAAA,mBAAYA,OAAOC,IAAP,EAAZ;AAAA,SAAV;AACH,KALF,EAMFJ,IANE,CAOC,uBAAQH,GAAR,CAPD,EAQDW,KARC,CAQKV,IARL,CAAP;AAUH,CAXM;;AAgBP","file":"controller.js","sourcesContent":["import model from './model'\nimport {success} from '../service/response'\n\nexport const index = function(req, res, next) {\n    return model\n        .find({})\n        .then(\n            (model) => {\n                model.map((schema) => schema.view())\n            }\n        )\n        .then(\n            (result,status)=>{\n                res.json(result);\n            }\n        ).catch(next);\n\n};\n\n\nexport const index2 = (req, res, next) => {\n    return model\n        .find({})\n        .then(\n            (model) => {\n                model.map((schema) => schema.view())\n            })\n        .then(\n            success(res)\n        ).catch(next);\n\n};\n\n\n\n\n/*\nexport const show = (req, res, next) => {\n    const id = req.params.id\n    return AuthorModel.findById(id).exec()\n        .then((actor) => actor ? actor.view('full') : null)\n        .then(success(res))\n        .catch(notFound(res))\n}\n\nexport const create = (req, res, next) => {\n    const body = req.body\n    AuthorModel.create(body)\n        .then((actor) => actor.view('full'))\n        .then(success(res))\n        .catch(next)\n}\n\nexport const update = (req, res, next) => {\n    const id = req.params.id\n    const body = req.body\n\n    return AuthorModel.findById(id)\n        .then(notFound(res))\n        .then((actor) => actor ? Object.assign(actor, body).save() : null)\n        .then((actor) => actor ? actor.view('full') : null)\n        .then(success(res))\n        .catch(next)\n}\n\nexport const destroy = (req, res, next) => {\n    const id = req.params.id\n    return AuthorModel.findById(id)\n        .then(notFound(res))\n        .then((actor) => actor ? actor.remove() : null)\n        .then(success(res, 204))\n        .catch(next)\n}\n\n\n// ---\n\nexport const searchByName = (req, res, next) => {\n    const name = req.params.name\n\n    AuthorModel.findOne({ \"name\" : { $regex: new RegExp(`${name}`, 'i') } },\n        function (err, actor) {\n            if (!actor)\n                return notFound(res)(actor);\n            success(res)(actor.view())\n        })\n}\n\nexport const searchByHeight = (req, res, next) => {\n    const min = req.params.min\n    const max = req.params.max\n\n    AuthorModel.find({\n            'height' : { $lte :  max, $gte :  min},\n        },\n        function (err, actor) {\n            if (!actor)\n                return notFound(res)(actor);\n            success(res)(actor)\n        })\n}\n\n\nexport const searchByBirthday = (req, res, next) => {\n    const min = new Date(req.params.min)\n    const max = new Date(req.params.max)\n\n    AuthorModel.find({\n        'birthday' : { $lte :  max, $gte :  min},\n    })\n        .then((AuthorModel) => AuthorModel.map((actor) => actor.view('full')))\n        .then(success(res))\n        .catch(next)\n}\n\nexport const count = (req, res, next) => {\n    AuthorModel.count({})\n        .then((count) => ({count: count}))\n        .then(success(res))\n        .catch(next)\n}\n\nexport const listcount = (req, res, next) => {\n    Promise.all([\n        AuthorModel.find({})\n            .then((AuthorModel) => AuthorModel.map((actor) => actor.view())),\n        AuthorModel.count({})\n    ]).then(([list, count]) => success(res)({list: list, count: count})).catch(next)\n}\n\nexport const paginatedIndex = (req, res, next) => {\n    // Call it as: http://localhost:9000/api/AuthorModel/index?limit=10&skip=1\n    const limit = parseInt(req.query.limit) || 1000\n    const skip = parseInt(req.query.skip) || 0\n\n    return AuthorModel.find()\n        .limit(limit)\n        .skip(skip)\n        .sort({birthday: -1})\n        .then((AuthorModel) => AuthorModel.map((actor) => actor.view('full')))\n        .then(success(res))\n        .catch(next)\n\n}\n*/"]}