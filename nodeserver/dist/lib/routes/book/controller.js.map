{"version":3,"sources":["../../../../lib/routes/book/controller.js"],"names":["Object","defineProperty","exports","value","index2","index","undefined","_model","require","_model2","_interopRequireDefault","_response","obj","__esModule","default","req","res","next","find","then","model","map","schema","view","result","status","json","catch","success"],"mappings":"AAAA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,WAAO;AADkC,CAA7C;AAGAD,QAAQE,MAAR,GAAiBF,QAAQG,KAAR,GAAgBC,SAAjC;;AAEA,IAAIC,SAASC,QAAQ,SAAR,CAAb;;AAEA,IAAIC,UAAUC,uBAAuBH,MAAvB,CAAd;;AAEA,IAAII,YAAYH,QAAQ,qBAAR,CAAhB;;AAEA,SAASE,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,WAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEE,SAASF,GAAX,EAArC;AAAwD;;AAE/F,IAAIP,QAAQH,QAAQG,KAAR,GAAgB,SAASA,KAAT,CAAeU,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+B;AACvD,WAAOR,QAAQK,OAAR,CAAgBI,IAAhB,CAAqB,EAArB,EAAyBC,IAAzB,CAA8B,UAAUC,KAAV,EAAiB;AAClDA,cAAMC,GAAN,CAAU,UAAUC,MAAV,EAAkB;AACxB,mBAAOA,OAAOC,IAAP,EAAP;AACH,SAFD;AAGH,KAJM,EAIJJ,IAJI,CAIC,UAAUK,MAAV,EAAkBC,MAAlB,EAA0B;AAC9BT,YAAIU,IAAJ,CAASF,MAAT;AACH,KANM,EAMJG,KANI,CAMEV,IANF,CAAP;AAOH,CARD;;AAUA,IAAIb,SAASF,QAAQE,MAAR,GAAiB,SAASA,MAAT,CAAgBW,GAAhB,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgC;AAC1D,WAAOR,QAAQK,OAAR,CAAgBI,IAAhB,CAAqB,EAArB,EAAyBC,IAAzB,CAA8B,UAAUC,KAAV,EAAiB;AAClDA,cAAMC,GAAN,CAAU,UAAUC,MAAV,EAAkB;AACxB,mBAAOA,OAAOC,IAAP,EAAP;AACH,SAFD;AAGH,KAJM,EAIJJ,IAJI,CAIC,CAAC,GAAGR,UAAUiB,OAAd,EAAuBZ,GAAvB,CAJD,EAI8BW,KAJ9B,CAIoCV,IAJpC,CAAP;AAKH,CAND;;AAQA","file":"controller.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.index2 = exports.index = undefined;\n\nvar _model = require('./model');\n\nvar _model2 = _interopRequireDefault(_model);\n\nvar _response = require('../service/response');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar index = exports.index = function index(req, res, next) {\n    return _model2.default.find({}).then(function (model) {\n        model.map(function (schema) {\n            return schema.view();\n        });\n    }).then(function (result, status) {\n        res.json(result);\n    }).catch(next);\n};\n\nvar index2 = exports.index2 = function index2(req, res, next) {\n    return _model2.default.find({}).then(function (model) {\n        model.map(function (schema) {\n            return schema.view();\n        });\n    }).then((0, _response.success)(res)).catch(next);\n};\n\n/*\nexport const show = (req, res, next) => {\n    const id = req.params.id\n    return AuthorModel.findById(id).exec()\n        .then((actor) => actor ? actor.view('full') : null)\n        .then(success(res))\n        .catch(notFound(res))\n}\n\nexport const create = (req, res, next) => {\n    const body = req.body\n    AuthorModel.create(body)\n        .then((actor) => actor.view('full'))\n        .then(success(res))\n        .catch(next)\n}\n\nexport const update = (req, res, next) => {\n    const id = req.params.id\n    const body = req.body\n\n    return AuthorModel.findById(id)\n        .then(notFound(res))\n        .then((actor) => actor ? Object.assign(actor, body).save() : null)\n        .then((actor) => actor ? actor.view('full') : null)\n        .then(success(res))\n        .catch(next)\n}\n\nexport const destroy = (req, res, next) => {\n    const id = req.params.id\n    return AuthorModel.findById(id)\n        .then(notFound(res))\n        .then((actor) => actor ? actor.remove() : null)\n        .then(success(res, 204))\n        .catch(next)\n}\n\n\n// ---\n\nexport const searchByName = (req, res, next) => {\n    const name = req.params.name\n\n    AuthorModel.findOne({ \"name\" : { $regex: new RegExp(`${name}`, 'i') } },\n        function (err, actor) {\n            if (!actor)\n                return notFound(res)(actor);\n            success(res)(actor.view())\n        })\n}\n\nexport const searchByHeight = (req, res, next) => {\n    const min = req.params.min\n    const max = req.params.max\n\n    AuthorModel.find({\n            'height' : { $lte :  max, $gte :  min},\n        },\n        function (err, actor) {\n            if (!actor)\n                return notFound(res)(actor);\n            success(res)(actor)\n        })\n}\n\n\nexport const searchByBirthday = (req, res, next) => {\n    const min = new Date(req.params.min)\n    const max = new Date(req.params.max)\n\n    AuthorModel.find({\n        'birthday' : { $lte :  max, $gte :  min},\n    })\n        .then((AuthorModel) => AuthorModel.map((actor) => actor.view('full')))\n        .then(success(res))\n        .catch(next)\n}\n\nexport const count = (req, res, next) => {\n    AuthorModel.count({})\n        .then((count) => ({count: count}))\n        .then(success(res))\n        .catch(next)\n}\n\nexport const listcount = (req, res, next) => {\n    Promise.all([\n        AuthorModel.find({})\n            .then((AuthorModel) => AuthorModel.map((actor) => actor.view())),\n        AuthorModel.count({})\n    ]).then(([list, count]) => success(res)({list: list, count: count})).catch(next)\n}\n\nexport const paginatedIndex = (req, res, next) => {\n    // Call it as: http://localhost:9000/api/AuthorModel/index?limit=10&skip=1\n    const limit = parseInt(req.query.limit) || 1000\n    const skip = parseInt(req.query.skip) || 0\n\n    return AuthorModel.find()\n        .limit(limit)\n        .skip(skip)\n        .sort({birthday: -1})\n        .then((AuthorModel) => AuthorModel.map((actor) => actor.view('full')))\n        .then(success(res))\n        .catch(next)\n\n}\n*/"]}