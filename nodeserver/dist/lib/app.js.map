{"version":3,"sources":["../../lib/app.js"],"names":["express","require","path","favicon","logger","cookieParser","bodyParser","mongoose","index","users","books","authors","app","promise","connect","set","join","__dirname","use","json","urlencoded","extended","static","req","res","next","err","Error","status","locals","message","error","get","render","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,UAAUC,QAAQ,SAAR,CAAd;AACA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;AACA,IAAIE,UAAUF,QAAQ,eAAR,CAAd;AACA,IAAIG,SAASH,QAAQ,QAAR,CAAb;AACA,IAAII,eAAeJ,QAAQ,eAAR,CAAnB;AACA,IAAIK,aAAaL,QAAQ,aAAR,CAAjB;AACA,IAAIM,WAAWN,QAAQ,UAAR,CAAf;AACA,IAAIO,QAAQP,QAAQ,gBAAR,CAAZ;AACA,IAAIQ,QAAQR,QAAQ,gBAAR,CAAZ;AACA,IAAIS,QAAQT,QAAQ,qBAAR,CAAZ;AACA,IAAIU,UAAUV,QAAQ,uBAAR,CAAd;;AAEA,IAAIW,MAAMZ,SAAV;;AAEA,IAAIa,UAAUN,SAASO,OAAT,CAAiB,6BAAjB,CAAd;;AAEA;AACAF,IAAIG,GAAJ,CAAQ,OAAR,EAAiBb,KAAKc,IAAL,CAAUC,SAAV,EAAqB,OAArB,CAAjB;AACAL,IAAIG,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;;AAEA;AACAH,IAAIM,GAAJ,CAAQf,QAAQD,KAAKc,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+B,aAA/B,CAAR,CAAR;AACAL,IAAIM,GAAJ,CAAQd,OAAO,KAAP,CAAR;AACAQ,IAAIM,GAAJ,CAAQZ,WAAWa,IAAX,EAAR;AACAP,IAAIM,GAAJ,CAAQZ,WAAWc,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAT,IAAIM,GAAJ,CAAQb,cAAR;AACAO,IAAIM,GAAJ,CAAQlB,QAAQsB,MAAR,CAAepB,KAAKc,IAAL,CAAUC,SAAV,EAAqB,QAArB,CAAf,CAAR;;AAEAL,IAAIM,GAAJ,CAAQ,GAAR,EAAaV,KAAb;AACAI,IAAIM,GAAJ,CAAQ,QAAR,EAAkBT,KAAlB;AACAG,IAAIM,GAAJ,CAAQ,QAAR,EAAkBR,KAAlB;AACAE,IAAIM,GAAJ,CAAQ,UAAR,EAAoBP,OAApB;;AAEA;AACAC,IAAIM,GAAJ,CAAQ,UAAUK,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AAChC,MAAIC,MAAM,IAAIC,KAAJ,CAAU,WAAV,CAAV;AACAD,MAAIE,MAAJ,GAAa,GAAb;AACAH,OAAKC,GAAL;AACD,CAJD;;AAMA;AACAd,IAAIM,GAAJ,CAAQ,UAAUQ,GAAV,EAAeH,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+B;AACrC;AACAD,MAAIK,MAAJ,CAAWC,OAAX,GAAqBJ,IAAII,OAAzB;AACAN,MAAIK,MAAJ,CAAWE,KAAX,GAAmBR,IAAIX,GAAJ,CAAQoB,GAAR,CAAY,KAAZ,MAAuB,aAAvB,GAAuCN,GAAvC,GAA6C,EAAhE;;AAEA;AACAF,MAAII,MAAJ,CAAWF,IAAIE,MAAJ,IAAc,GAAzB;AACAJ,MAAIS,MAAJ,CAAW,OAAX;AACD,CARD;;AAUAC,OAAOC,OAAP,GAAiBvB,GAAjB","file":"app.js","sourcesContent":["'use strict';\n\nvar express = require('express');\nvar path = require('path');\nvar favicon = require('serve-favicon');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\nvar mongoose = require('mongoose');\nvar index = require('./routes/index');\nvar users = require('./routes/users');\nvar books = require('./routes/book/index');\nvar authors = require('./routes/author/index');\n\nvar app = express();\n\nvar promise = mongoose.connect('mongodb://localhost/library');\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'jade');\n\n// uncomment after placing your favicon in /public\napp.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use('/', index);\napp.use('/users', users);\napp.use('/books', books);\napp.use('/authors', authors);\n\n// catch 404 and forward to error handler\napp.use(function (req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handler\napp.use(function (err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n\nmodule.exports = app;"]}